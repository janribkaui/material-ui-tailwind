version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.2.3
  aws-s3: circleci/aws-s3@4.0

parameters:
  browserstack-force:
    description: Whether to force browserstack usage. We have limited resources on browserstack so the pipeline might decide to skip browserstack if this parameter isn't set to true.
    type: boolean
    default: false
  react-version:
    description: The version of react to be used
    type: string
    default: stable
  workflow:
    description: The name of the workflow to run
    type: string
    default: pipeline
  e2e-base-url:
    description: The base url for running end-to-end test
    type: string
    default: ''

default-job: &default-job
  parameters:
    react-version:
      description: The version of react to be used
      type: string
      default: << pipeline.parameters.react-version >>
    test-gate:
      description: A particular type of tests that should be run
      type: string
      default: undefined
    e2e-base-url:
      description: The base url for running end-to-end test
      type: string
      default: << pipeline.parameters.e2e-base-url >>
  environment:
    # expose it globally otherwise we have to thread it from each job to the install command
    BROWSERSTACK_FORCE: << pipeline.parameters.browserstack-force >>
    REACT_VERSION: << parameters.react-version >>
    TEST_GATE: << parameters.test-gate >>
    AWS_REGION_ARTIFACTS: eu-central-1
    COREPACK_ENABLE_DOWNLOAD_PROMPT: '0'
  working_directory: /tmp/material-ui
  docker:
    - image: cimg/node:20.17

default-context: &default-context
  context:
    - org-global

# CircleCI has disabled the cache across forks for security reasons.
# Following their official statement, it was a quick solution, they
# are working on providing this feature back with appropriate security measures.
# https://discuss.circleci.com/t/saving-cache-stopped-working-warning-skipping-this-step-disabled-in-configuration/24423/21
#
# restore_repo: &restore_repo
#   restore_cache:
#     key: v1-repo-{{ .Branch }}-{{ .Revision }}

commands:
  setup_corepack:
    parameters:
      browsers:
        type: boolean
        default: false
        description: 'Set to true if you intend to any browser (for example with playwright).'
    steps:
      - when:
          condition: << parameters.browsers >>
          steps:
            - run:
                name: Install pnpm package manager
                command: corepack enable
      - when:
          condition:
            not: << parameters.browsers >>
          steps:
            - run:
                name: Install pnpm package manager
                # See https://stackoverflow.com/a/73411601
                command: corepack enable --install-directory ~/bin

      - run:
          name: View install environment
          command: |
            node --version
            pnpm --version

  install_js:
    parameters:
      browsers:
        type: boolean
        default: false
        description: 'Set to true if you intend to any browser (for example with playwright).'

    steps:
      - setup_corepack:
          browsers: << parameters.browsers >>

      - run:
          name: Install js dependencies
          command: pnpm install

jobs:
  checkout:
    <<: *default-job
    steps:
      - checkout
      - install_js
      - when:
          # Install can be "dirty" when running with non-default versions of React
          condition:
            equal: [<< parameters.react-version >>, stable]
          steps:
            - run:
                name: Should not have any git not staged
                command: git add -A && git diff --exit-code --staged
            - run:
                name: '`pnpm dedupe` was run?'
                command: |
                  # #default-branch-switch
                  if [[ $(git diff --name-status master | grep -E 'pnpm-workspace\.yaml|pnpm-lock.yaml|package\.json') == "" ]];
                  then
                      echo "No changes to dependencies detected. Skipping..."
                  else
                      pnpm dedupe --check
                  fi
  test_unit:
    <<: *default-job
    steps:
      - checkout
      - install_js
      - run:
          name: Tests fake browser
          command: pnpm test:coverage:ci
      - run:
          name: Check coverage generated
          command: |
            if ! [[ -s coverage/lcov.info ]]
            then
              exit 1
            fi
      - run:
          name: Coverage
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov -t ${CODECOV_TOKEN} -Z -F "$REACT_VERSION-jsdom"
  test_lint:
    <<: *default-job
    steps:
      - checkout
      - install_js
      - run:
          name: Eslint
          command: pnpm eslint:ci
      - run:
          name: Stylelint
          command: pnpm stylelint
      - run:
          name: Lint JSON
          command: pnpm jsonlint
      - run:
          name: Lint Markdown
          command: pnpm markdownlint
      - run:
          # See https://circleci.com/developer/orbs/orb/circleci/vale as reference
          name: Install Vale
          command: |
            #!/bin/bash
            VALE_STR_CLI_VERSION=3.3.0

            # set smart sudo
            if [[ $EUID -eq 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

            mkdir /tmp/vale-extract
            cd /tmp/vale-extract
            GZIPPED_OUTPUT="vale.tar.gz"
            BINARY_URL=https://github.com/errata-ai/vale/releases/download/v${VALE_STR_CLI_VERSION}/vale_${VALE_STR_CLI_VERSION}_Linux_64-bit.tar.gz
            curl -sSL "$BINARY_URL" -o "${GZIPPED_OUTPUT}"

            if [ ! -s "${GZIPPED_OUTPUT}" ]; then
              echo "Downloaded file is empty"
              rm "${GZIPPED_OUTPUT}"
              exit 1
            fi

            tar -xzf "${GZIPPED_OUTPUT}"
            $SUDO mv vale /usr/local/bin
            rm "${GZIPPED_OUTPUT}"

            # validate installation
            if [[ -z "$(command -v vale)" ]]; then
              echo "vale installation failed"
              exit 1
            else
              echo "vale installation successful"
              vale --version
              exit 0
            fi
      - run:
          name: Lint writing style
          command: |
            vale sync
            pnpm valelint
  test_static:
    <<: *default-job
    steps:
      - checkout
      - install_js
      - run:
          name: '`pnpm prettier` changes committed?'
          command: pnpm prettier --check
      - run:
          name: Generate PropTypes
          command: pnpm proptypes
      - run:
          name: 'Write "use client" directive'
          command: pnpm rsc:build
      - run:
          name: '`pnpm rsc:build` changes committed?'
          command: git add -A && git diff --exit-code --staged
      - run:
          name: Generate the documentation
          command: pnpm docs:api
      - run:
          name: '`pnpm docs:api` changes committed?'
          command: git add -A && git diff --exit-code --staged
      - run:
          name: Update the navigation translations
          command: pnpm docs:i18n
      - run:
          name: '`pnpm docs:i18n` changes committed?'
          command: git add -A && git diff --exit-code --staged
      - run:
          name: '`pnpm extract-error-codes` changes committed?'
          command: |
            pnpm extract-error-codes
            git add -A && git diff --exit-code --staged
      - run:
          name: '`pnpm docs:link-check` changes committed?'
          command: |
            pnpm docs:link-check
            git add -A && git diff --exit-code --staged
  test_types:
    <<: *default-job
    resource_class: 'medium+'
    steps:
      - checkout
      - install_js
      - run:
          name: Transpile TypeScript demos
          command: pnpm docs:typescript:formatted
      - run:
          name: '`pnpm docs:typescript:formatted` changes committed?'
          command: git add -A && git diff --exit-code --staged
      - run:
          name: Tests TypeScript definitions
          command: pnpm typescript:ci
          environment:
            NODE_OPTIONS: --max-old-space-size=3072
      - run:
          name: Test module augmentation
          command: |
            pnpm --filter @janribkaui/material typescript:module-augmentation
            pnpm --filter @janribkaui/system typescript:module-augmentation
      - run:
          name: Diff declaration files
          command: |
            git add -f packages/janribkaui-material/build || echo '/material declarations do not exist'
            git add -f packages/janribkaui-lab/build || echo '/lab declarations do not exist'
            git add -f packages/janribkaui-utils/build || echo '/utils declarations do not exist'
            pnpm -r build:types
            git --no-pager diff
      - run:
          name: Any defect declaration files?
          command: node scripts/testBuiltTypes.mjs
      - save_cache:
          name: Save generated declaration files
          key: typescript-declaration-files-{{ .Branch }}-{{ .Revision }}
          paths:
            # packages with generated declaration files
            - packages/janribkaui-material/build
            - packages/janribkaui-lab/build
            - packages/janribkaui-utils/build
  test_types_next:
    <<: *default-job
    resource_class: 'medium+'
    steps:
      - checkout
      - install_js
      - run:
          name: Resolve typescript version
          command: |
            pnpm update -r typescript@next
            # log a patch for maintainers who want to check out this change
            git --no-pager diff HEAD
      - run:
          name: Tests TypeScript definitions
          command: |
            # ignore build failures
            # it's expected that typescript@next fails since the lines of the errors
            # change frequently. This build is monitored regardless of its status
            set +e
            pnpm typescript:ci
            exit 0

      - restore_cache:
          name: Restore generated declaration files
          keys:
            # We assume that the target branch is `next` and that declaration files are persisted in commit order.
            # "If there are multiple matches, the most recently generated cache will be used."
            - typescript-declaration-files-next

      - run:
          name: Diff declaration files
          command: |
            git add -f packages/janribkaui-material/build || echo '/core declarations do not exist'
            git add -f packages/janribkaui-lab/build || echo '/lab declarations do not exist'
            git add -f packages/janribkaui-utils/build || echo '/utils declarations do not exist'
            pnpm -r build:types
            git --no-pager diff

      - run:
          name: Log defect declaration files
          command: |
            # ignore build failures
            # Fixing these takes some effort that isn't viable to merge in a single PR.
            # We'll simply monitor them for now.
            set +e
            node scripts/testBuiltTypes.mjs
            exit 0
  test_browser:
    <<: *default-job
    resource_class: 'medium+'
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    steps:
      - checkout
      - install_js:
          browsers: true
      - run:
          name: Tests real browsers
          command: pnpm test:karma
      - run:
          name: Check coverage generated
          command: |
            if ! [[ -s coverage/lcov.info ]]
            then
              exit 1
            fi
      - run:
          name: Coverage
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov -t ${CODECOV_TOKEN} -Z -F "$REACT_VERSION-browser"
      - store_artifacts:
          # hardcoded in karma-webpack
          path: /tmp/_karma_webpack_
          destination: artifact-file
  test_e2e:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    steps:
      - checkout
      - install_js:
          browsers: true
      - run:
          name: pnpm test:e2e
          command: pnpm test:e2e
  test_e2e_website:
    # NOTE: This workflow runs after successful docs deploy. See /test/e2e-website/README.md#ci
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    steps:
      - checkout
      - install_js:
          browsers: true
      - run:
          name: pnpm test:e2e-website
          command: pnpm test:e2e-website
          environment:
            PLAYWRIGHT_TEST_BASE_URL: << parameters.e2e-base-url >>
  test_profile:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    steps:
      - checkout
      - install_js:
          browsers: true
      - run:
          name: Tests real browsers
          # Run a couple of times for a better sample.
          # TODO: hack something together where we can compile once and run multiple times e.g. by abusing watchmode.
          command: |
            # Running on chrome only since actual times are innaccurate anyway
            # The other reason is that browserstack allows little concurrency so it's likely that we're starving other runs.
            pnpm test:karma:profile --browsers chrome,chromeHeadless
            pnpm test:karma:profile --browsers chrome,chromeHeadless
            pnpm test:karma:profile --browsers chrome,chromeHeadless
            pnpm test:karma:profile --browsers chrome,chromeHeadless
            pnpm test:karma:profile --browsers chrome,chromeHeadless
      # Persist reports for inspection in https://mui-dashboard.netlify.app/
      - store_artifacts:
          # see karma.conf.profile.js reactProfilerReporter.outputDir
          path: tmp/react-profiler-report/karma
          destination: react-profiler-report/karma
  test_regressions:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    steps:
      - checkout
      - install_js:
          browsers: true
      - run:
          name: Run visual regression tests
          command: xvfb-run pnpm test:regressions
      - run:
          name: Build packages for fixtures
          command: pnpm release:build
      - run:
          name: Run visual regression tests using Pigment CSS
          command: xvfb-run pnpm test:regressions-pigment-css
      - run:
          name: Upload screenshots to Argos CI
          command: pnpm test:argos
  test_bundling_prepare:
    <<: *default-job
    steps:
      - checkout
      - install_js
      - run:
          name: Build packages for fixtures
          command: pnpm lerna run --scope "@mui/*" build
      - run:
          name: Pack packages
          command: pnpm release:pack
      - persist_to_workspace:
          root: packed
          paths:
            - '*'

  test_bundling_node_cjs:
    <<: *default-job
    working_directory: /tmp/material-ui/test/bundling/fixtures/node-cjs/
    steps:
      - checkout:
          path: /tmp/material-ui
      - attach_workspace:
          at: /tmp/material-ui/packed
      - setup_corepack
      - run:
          name: Install dependencies
          command: pnpm install --ignore-workspace
      - run:
          name: Test fixture
          command: pnpm start
  test_bundling_node_esm:
    <<: *default-job
    working_directory: /tmp/material-ui/test/bundling/fixtures/node-esm/
    steps:
      - checkout:
          path: /tmp/material-ui
      - attach_workspace:
          at: /tmp/material-ui/packed
      - setup_corepack
      - run:
          name: Install dependencies
          command: pnpm install --ignore-workspace
      - run:
          name: Test fixture
          # TODO: Known failure
          command: pnpm start
  test_bundling_next_webpack4:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    working_directory: /tmp/material-ui/test/bundling/fixtures/next-webpack4/
    steps:
      - checkout:
          path: /tmp/material-ui
      - attach_workspace:
          at: /tmp/material-ui/packed
      - setup_corepack:
          browsers: true
      - run:
          name: Install dependencies
          command: pnpm install --ignore-workspace
      - run:
          name: Test fixture
          command: pnpm start
  test_bundling_next_webpack5:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    working_directory: /tmp/material-ui/test/bundling/fixtures/next-webpack5/
    steps:
      - checkout:
          path: /tmp/material-ui
      - attach_workspace:
          at: /tmp/material-ui/packed
      - setup_corepack:
          browsers: true
      - run:
          name: Install dependencies
          command: pnpm install --ignore-workspace
      - run:
          name: Test fixture
          command: pnpm start
  test_bundling_create_react_app:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    working_directory: /tmp/material-ui/test/bundling/fixtures/create-react-app/
    steps:
      - checkout:
          path: /tmp/material-ui
      - attach_workspace:
          at: /tmp/material-ui/packed
      - setup_corepack:
          browsers: true
      - run:
          name: Install dependencies
          command: pnpm install --ignore-workspace
      - run:
          name: Test fixture
          command: pnpm start
  test_bundling_snowpack:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    working_directory: /tmp/material-ui/test/bundling/fixtures/snowpack/
    steps:
      - checkout:
          path: /tmp/material-ui
      - attach_workspace:
          at: /tmp/material-ui/packed
      - setup_corepack:
          browsers: true
      - run:
          name: Install dependencies
          command: pnpm install --ignore-workspace
      - run:
          name: Test fixture
          command: pnpm start
  test_bundling_vite:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    working_directory: /tmp/material-ui/test/bundling/fixtures/vite/
    steps:
      - checkout:
          path: /tmp/material-ui
      - attach_workspace:
          at: /tmp/material-ui/packed
      - setup_corepack:
          browsers: true
      - run:
          name: Install dependencies
          command: pnpm install --ignore-workspace
      - run:
          name: Test fixture
          command: pnpm start
  test_bundling_esbuild:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    working_directory: /tmp/material-ui/test/bundling/fixtures/esbuild/
    steps:
      - checkout:
          path: /tmp/material-ui
      - attach_workspace:
          at: /tmp/material-ui/packed
      - setup_corepack:
          browsers: true
      - run:
          name: Install dependencies
          command: pnpm install --ignore-workspace
      - run:
          name: Test fixture
          command: pnpm start
  test_bundling_gatsby:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
        environment:
          GATSBY_CPU_COUNT: '3'
    working_directory: /tmp/material-ui/test/bundling/fixtures/gatsby/
    steps:
      - checkout:
          path: /tmp/material-ui
      - attach_workspace:
          at: /tmp/material-ui/packed
      - setup_corepack:
          browsers: true
      - run:
          name: Install dependencies
          command: pnpm install --ignore-workspace
      - run:
          name: Test fixture
          command: pnpm start

  test_bundle_size_monitor:
    <<: *default-job
    steps:
      - checkout
      - install_js
      - run:
          name: prepare danger on PRs
          command: pnpm danger ci
          environment:
            DANGER_COMMAND: prepareBundleSizeReport
      - setup_corepack
      - run:
          name: build @mui packages
          command: pnpm lerna run --ignore @mui/icons-material --concurrency 6 --scope "@mui/*" build
      - run:
          name: create @mui/material canary distributable
          command: |
            cd packages/mui-material/build
            npm version 0.0.0-canary.${CIRCLE_SHA1} --no-git-tag-version
            npm pack
            mv mui-material-0.0.0-canary.${CIRCLE_SHA1}.tgz ../../../mui-material.tgz
      - when:
          # don't run on PRs
          condition:
            not:
              matches:
                # "^pull/\d+" is not valid YAML
                # "^pull/\\d+" matches neither 'pull/1' nor 'main'
                # Note that we want to include 'pull/1', 'pull/1/head' and ''pull/1/merge'
                pattern: '^pull/.+$'
                value: << pipeline.git.branch >>
          steps:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID_ARTIFACTS
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY_ARTIFACTS
                region: ${AWS_REGION_ARTIFACTS}
            # Upload distributables to S3
            - aws-s3/copy:
                from: mui-material.tgz
                to: s3://mui-org-ci/artifacts/$CIRCLE_BRANCH/$CIRCLE_SHA1/
      - store_artifacts:
          path: mui-material.tgz
          destination: mui-material.tgz
      - run:
          name: create a size snapshot
          command: pnpm size:snapshot
      - store_artifacts:
          name: persist size snapshot as pipeline artifact
          path: size-snapshot.json
          destination: size-snapshot.json
      - when:
          # don't run on PRs
          condition:
            not:
              matches:
                # "^pull/\d+" is not valid YAML
                # "^pull/\\d+" matches neither 'pull/1' nor 'main'
                # Note that we want to include 'pull/1', 'pull/1/head' and ''pull/1/merge'
                pattern: '^pull/.+$'
                value: << pipeline.git.branch >>
          steps:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID_ARTIFACTS
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY_ARTIFACTS
                region: ${AWS_REGION_ARTIFACTS}
            # persist size snapshot on S3
            - aws-s3/copy:
                arguments: --content-type application/json
                from: size-snapshot.json
                to: s3://mui-org-ci/artifacts/$CIRCLE_BRANCH/$CIRCLE_SHA1/
            # symlink size-snapshot to latest
            - aws-s3/copy:
                arguments: --content-type application/json
                from: size-snapshot.json
                to: s3://mui-org-ci/artifacts/$CIRCLE_BRANCH/latest/
      - run:
          name: Run danger on PRs
          command: pnpm danger ci --fail-on-errors
          environment:
            DANGER_COMMAND: reportBundleSize
  test_benchmark:
    <<: *default-job
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-focal
    steps:
      - checkout
      - install_js:
          browsers: true
      - run: pnpm benchmark:browser
      - store_artifacts:
          name: Publish benchmark results as a pipeline artifact.
          path: tmp/benchmarks
          destination: benchmarks
workflows:
  version: 2
  pipeline:
    when:
      equal: [pipeline, << pipeline.parameters.workflow >>]
    jobs:
      - checkout:
          <<: *default-context
      - test_unit:
          <<: *default-context
          requires:
            - checkout
      - test_lint:
          <<: *default-context
          requires:
            - checkout
      - test_static:
          <<: *default-context
          requires:
            - checkout
      - test_types:
          <<: *default-context
          requires:
            - checkout
      - test_browser:
          <<: *default-context
          requires:
            - checkout
      - test_regressions:
          <<: *default-context
          requires:
            - checkout
      - test_e2e:
          <<: *default-context
          requires:
            - checkout
      - test_bundle_size_monitor:
          <<: *default-context
          requires:
            - checkout
  e2e-website:
    when:
      equal: [e2e-website, << pipeline.parameters.workflow >>]
    jobs:
      - checkout:
          <<: *default-context
      - test_e2e_website:
          <<: *default-context
          requires:
            - checkout

  bundling:
    when:
      equal: [bundling, << pipeline.parameters.workflow >>]
    jobs:
      - test_bundling_prepare:
          <<: *default-context
      - test_bundling_node_cjs:
          <<: *default-context
          requires:
            - test_bundling_prepare
      - test_bundling_node_esm:
          <<: *default-context
          requires:
            - test_bundling_prepare
      - test_bundling_create_react_app:
          <<: *default-context
          requires:
            - test_bundling_prepare
      - test_bundling_snowpack:
          <<: *default-context
          requires:
            - test_bundling_prepare
      - test_bundling_vite:
          <<: *default-context
          requires:
            - test_bundling_prepare
      - test_bundling_esbuild:
          <<: *default-context
          requires:
            - test_bundling_prepare
      - test_bundling_gatsby:
          <<: *default-context
          requires:
            - test_bundling_prepare
      - test_bundling_next_webpack4:
          <<: *default-context
          requires:
            - test_bundling_prepare
      - test_bundling_next_webpack5:
          <<: *default-context
          requires:
            - test_bundling_prepare

  profile:
    when:
      equal: [profile, << pipeline.parameters.workflow >>]
    jobs:
      - test_profile:
          <<: *default-context

  # This workflow can be triggered manually on the PR
  react-17:
    when:
      equal: [react-17, << pipeline.parameters.workflow >>]
    jobs:
      - test_unit:
          <<: *default-context
          react-version: ^17.0.0
          name: test_unit-react@17
      - test_browser:
          <<: *default-context
          react-version: ^17.0.0
          name: test_browser-react@17
      - test_regressions:
          <<: *default-context
          react-version: ^17.0.0
          name: test_regressions-react@17
      - test_e2e:
          <<: *default-context
          react-version: ^17.0.0
          name: test_e2e-react@17

  # This workflow is identical to react-17, but scheduled
  react-17-cron:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - master
                - next
    jobs:
      - test_unit:
          <<: *default-context
          react-version: ^17.0.0
          name: test_unit-react@17
      - test_browser:
          <<: *default-context
          react-version: ^17.0.0
          name: test_browser-react@17
      - test_regressions:
          <<: *default-context
          react-version: ^17.0.0
          name: test_regressions-react@17
      - test_e2e:
          <<: *default-context
          react-version: ^17.0.0
          name: test_e2e-react@17

  # This workflow can be triggered manually on the PR
  react-next:
    when:
      equal: [react-next, << pipeline.parameters.workflow >>]
    jobs:
      - test_unit:
          <<: *default-context
          react-version: next
          name: test_unit-react@next
      - test_browser:
          <<: *default-context
          react-version: next
          name: test_browser-react@next
      - test_regressions:
          <<: *default-context
          react-version: next
          name: test_regressions-react@next
      - test_e2e:
          <<: *default-context
          react-version: next
          name: test_e2e-react@next
  # This workflow is identical to react-next, but scheduled
  react-next-cron:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - master
                - next
    jobs:
      - test_unit:
          <<: *default-context
          react-version: next
          name: test_unit-react@next
      - test_browser:
          <<: *default-context
          react-version: next
          name: test_browser-react@next
      - test_regressions:
          <<: *default-context
          react-version: next
          name: test_regressions-react@next
      - test_e2e:
          <<: *default-context
          react-version: next
          name: test_e2e-react@next

  typescript-next:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - master
                - next
    jobs:
      - test_types_next:
          <<: *default-context
  benchmark:
    when:
      equal: [benchmark, << pipeline.parameters.workflow >>]
    jobs:
      - test_benchmark:
          <<: *default-context
